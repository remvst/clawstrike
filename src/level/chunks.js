
ALL_CHUNKS = [
    new Chunk(
        [[3,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,1,1,0],[1,0,0,0,0,0,0,1,1,0],[1,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,0],[1,2,2,1,1,1,1,0,0,0],[0,0,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0],[1,1,1,1,1,1,1,1,1,1]],
        [CONNECTION_UP, CONNECTION_RIGHT, CONNECTION_LEFT],
    ),
    new Chunk(
        [[3,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,2,2,1,0,0,1,2,2,0],[0,0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1]],
        [CONNECTION_UP, CONNECTION_RIGHT, CONNECTION_LEFT],
    ),
    new Chunk(
        [[3,3,3,3,3,3,3,3,3,3],[3,3,1,1,3,3,1,1,3,3],[3,3,3,1,3,3,1,3,3,3],[3,3,3,1,3,3,1,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,1,1,1,1,3,3,3],[3,3,3,0,1,1,3,3,3,3],[3,3,3,0,3,3,3,3,3,3],[1,1,1,1,1,1,1,1,1,1]],
        [CONNECTION_UP, CONNECTION_RIGHT, CONNECTION_LEFT],
    ),

    new Chunk(
        [[3,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,1,0,0,1],[0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0,0,1],[1,1,0,0,1,1,1,2,2,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1]],
        [CONNECTION_UP, CONNECTION_LEFT],
    ),

    new Chunk(
        [[3,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[1,1,1,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,0,0,1],[0,0,0,0,1,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[1,1,2,2,1,1,1,0,0,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1]],
        [CONNECTION_UP, CONNECTION_LEFT],
    ),

    new Chunk(
        [[1,1,1,1,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1,1],[1,1,1,0,0,0,1,1,1,1],[0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,1,1,1,1,0,0,1],[0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,1],[1,1,1,0,0,0,0,1,1,1]],
        [CONNECTION_UP, CONNECTION_DOWN, CONNECTION_LEFT],
    ),

    // new Chunk(
    //     [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
    //     [CONNECTION_UP, CONNECTION_RIGHT, CONNECTION_LEFT],
    // ),
    // new Chunk(
    //     [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 1, 1, 3, 3, 1, 1, 3, 3], [3, 3, 3, 1, 3, 3, 1, 3, 3, 3], [3, 3, 3, 1, 3, 3, 1, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 1, 1, 1, 1, 3, 3, 3], [3, 3, 3, 0, 1, 1, 3, 3, 3, 3], [3, 3, 3, 0, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
    //     [CONNECTION_UP, CONNECTION_RIGHT, CONNECTION_LEFT],
    // ),
    // new Chunk(
    //     [[3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
    //     [CONNECTION_UP, CONNECTION_LEFT],
    // ),
    // new Chunk(
    //     [[1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1]],
    //     [CONNECTION_UP, CONNECTION_DOWN],
    // ),
    // new Chunk(
    //     [[1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1]],
    //     [CONNECTION_UP, CONNECTION_DOWN],
    // ),
    // new Chunk(
    //     [[1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1]],
    //     [CONNECTION_UP, CONNECTION_DOWN, CONNECTION_RIGHT],
    // ),
    // new Chunk(
    //     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1], [1, 1, 3, 3, 3, 3, 3, 3, 1, 1]],
    //     [CONNECTION_LEFT, CONNECTION_DOWN, CONNECTION_RIGHT],
    // ),
];

// Make mirrored versions of the chunks
for (const chunk of ALL_CHUNKS.slice()) {
    const left = chunk.connections.includes(CONNECTION_LEFT);
    const right = chunk.connections.includes(CONNECTION_RIGHT);
    if ((left || right) && !(left && right)) {
        ALL_CHUNKS.push(new Chunk(
            chunk.matrix.map(row => row.slice().reverse()),
            chunk.connections.map(c => {
                if (c === CONNECTION_LEFT) return CONNECTION_RIGHT;
                if (c === CONNECTION_RIGHT) return CONNECTION_LEFT;
                return c;
            }),
        ));
    }
}
